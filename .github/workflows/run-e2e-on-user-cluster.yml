# Copyright 2024 Flant JSC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: Nightly E2E tests(main)

env:
  CI_COMMIT_REF_NAME: ${{ github.ref_name }}
  GO_VERSION: "1.22.7"

on:
  workflow_dispatch:
    inputs:
      username:
        description: GitHub username of user on which cluster the e2e tests would run
        required: true


defaults:
  run:
    shell: bash

jobs:
  git_info:
    name: Get git info
    runs-on: ubuntu-latest
    outputs:
      ci_commit_tag: ${{ steps.git_info.outputs.ci_commit_tag }}
      ci_commit_branch: ${{ steps.git_info.outputs.ci_commit_branch }}
      ci_commit_ref_name: ${{ steps.git_info.outputs.ci_commit_ref_name }}
      ci_commit_ref_slug: ${{ steps.git_info.outputs.ci_commit_ref_slug }}
      ref_full: ${{ steps.git_info.outputs.ref_full }}
      github_sha: ${{ steps.git_info.outputs.github_sha }}
      pr_number: ${{ steps.git_info.outputs.pr_number }}
    # Skip the CI for automation PRs, e.g. changelog
    if: ${{ github.event.pull_request.user.login != 'deckhouse-BOaTswain' }}
    steps:
      - id: git_info
        name: Get tag name and SHA
        uses: actions/github-script@v6.4.1
        with:
          script: |
            const { GITHUB_REF_TYPE, GITHUB_REF_NAME, GITHUB_REF } = process.env

            let refSlug = ''
            let refName = ''
            let refFull = ''
            let githubBranch = ''
            let githubTag = ''
            let githubSHA = ''
            let prNumber = ''
            if (context.eventName === "workflow_dispatch" && context.payload.inputs && context.payload.inputs.pull_request_ref) {
              // Trigger: workflow_dispatch with pull_request_ref.
              // Extract pull request number from 'refs/pull/<NUM>/merge'
              prNumber = context.payload.inputs.pull_request_ref.replace('refs/pull/', '').replace('/merge', '').replace('/head', '')

              refSlug       = `pr${prNumber}`
              refName       = context.payload.inputs.ci_commit_ref_name
              refFull       = context.payload.inputs.pull_request_ref
              githubBranch  = refName
              githubSHA     = context.payload.inputs.pull_request_sha
              core.info(`workflow_dispatch event: set git info from inputs. inputs: ${JSON.stringify(context.payload.inputs)}`)
            } else if (context.eventName === "pull_request" || context.eventName === "pull_request_target" ) {
              // For PRs from forks, tag images with `prXXX` to avoid clashes between branches.
              const targetRepo = context.payload.repository.full_name;
              const prRepo = context.payload.pull_request.head.repo.full_name
              const prRef = context.payload.pull_request.head.ref

              refSlug = `pr${context.issue.number}`;
              refName = (prRepo === targetRepo) ? prRef : refSlug;
              refFull = `refs/pull/${context.issue.number}/head`
              githubBranch = refName
              githubSHA = context.payload.pull_request.head.sha
              core.info(`pull request event: set git info from pull_request.head. pr:${prRepo}:${prRef} target:${targetRepo}:${context.ref}`)
              prNumber = context.issue.number
            } else {
              // Other triggers: workflow_dispatch without pull_request_ref, schedule, push...
              // refName is 'main' or tag name, so slugification is not necessary.
              refSlug       = GITHUB_REF_NAME
              refName       = GITHUB_REF_NAME
              refFull       = GITHUB_REF
              githubTag     = GITHUB_REF_TYPE == "tag"    ? refName : ""
              githubBranch  = GITHUB_REF_TYPE == "branch" ? refName : ""
              githubSHA     = context.sha
              core.info(`${context.eventName} event: set git info from context: ${JSON.stringify({GITHUB_REF_NAME, GITHUB_REF_TYPE, sha: context.sha })}`)
            }

            core.setCommandEcho(true)
            core.setOutput('ci_commit_ref_slug', refSlug)
            core.setOutput('ci_commit_ref_name', refName)
            core.setOutput(`ci_commit_tag`, githubTag)
            core.setOutput(`ci_commit_branch`, githubBranch)
            core.setOutput(`ref_full`, refFull)
            core.setOutput('github_sha', githubSHA)
            core.setOutput('pr_number', prNumber)
            core.setCommandEcho(false)

  show_dev_manifest:
    runs-on: ubuntu-latest
    name: Run e2e
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go ${{ env.GO_VERSION }}
        uses: actions/setup-go@v5
        with:
          go-version: "${{ env.GO_VERSION }}"

      - name: Install Task
        uses: arduino/setup-task@v2

      # - name: Install ginkgo
      #   working-directory: ./tests/e2e/
      #   run: |
      #     echo "Install ginkgo"
      #     GINKGO_VERSION=$(go list -f '{{.Version}}' -m github.com/onsi/ginkgo/v2)
      #     go install "github.com/onsi/ginkgo/v2/ginkgo@${GINKGO_VERSION}"

      - name: Install Deckhouse-cli
        run: |
          echo "Install d8"
          curl -fsSL -o d8-install.sh https://raw.githubusercontent.com/deckhouse/deckhouse-cli/main/d8-install.sh
          bash d8-install.sh

      - name: Extract kubeconfig
        run: |
          KUBECONFIG=$(echo "${KUBECONFIGS}" | jq -r --arg USERNAME ${{inputs.username}} '.[] | select(.user == $USERNAME) | .kubeconfig')
          echo "KUBECONFIG_DATA<<EOF" >> $GITHUB_ENV
          echo "${KUBECONFIG}" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
        env:
          KUBECONFIGS: "${{ secrets.K8S_CLUSTER_SECRET }}"
      
      - name: Mask kubeconfig
        run: |
          while read -r line; do
           echo "::add-mask::${line}"
          done <<< "${{ env.KUBECONFIG_DATA }}"

      - uses: azure/k8s-set-context@v4
        with:
          method: kubeconfig
          kubeconfig: ${{ env.KUBECONFIG_DATA }}

      # - name: Download dependencies
      #   working-directory: ./tests/e2e/
      #   run: |
      #     echo "Download dependencies"
      #     go mod download
      
      - name: Test run string
        run: |
          d8 k get nodes
          d8 k get po -A

      # - name: Run E2E
      #   id: e2e-tests
      #   working-directory: ./tests/e2e/
      #   run: |
      #     task run:ci -v
      - name: Update comment on finish
        id: update_comment_on_finish
        if: ${{ always() && github.event_name == 'workflow_dispatch' && !!github.event.inputs.issue_number }}
        env:
          NEEDS_CONTEXT: ${{ toJSON(needs) }}
          JOB_CONTEXT: ${{ toJSON(job) }}
          STEPS_CONTEXT: ${{ toJSON(steps) }}
        uses: actions/github-script@v6.4.1
        with:
          github-token: ${{secrets.CHANGELOG_ACCESS_TOKEN}}
          retries: 3
          script: |
            const statusConfig = 'job,separate';
            const name = 'destroy cluster: OpenStack, Containerd, Kubernetes Automatic';
            const needsContext = JSON.parse(process.env.NEEDS_CONTEXT);
            const jobContext = JSON.parse(process.env.JOB_CONTEXT);
            const stepsContext = JSON.parse(process.env.STEPS_CONTEXT);
            let jobNames = null
            if (process.env.JOB_NAMES) {
              jobNames = JSON.parse(process.env.JOB_NAMES);
            }

            core.info(`needsContext: ${JSON.stringify(needsContext)}`);
            core.info(`jobContext: ${JSON.stringify(jobContext)}`);
            core.info(`stepsContext: ${JSON.stringify(stepsContext)}`);
            core.info(`jobNames: ${JSON.stringify(jobNames)}`);

            const ci = require('./.github/scripts/js/ci');
            return await ci.updateCommentOnFinish({github, context, core, statusConfig, name, needsContext, jobContext, stepsContext, jobNames});

  # last_comment:
  #   name: Update comment on finish
  #   needs:
  #     - git_info
  #   # needs: ["started_at","git_info","run_containerd_1_28","run_containerd_1_29","run_containerd_1_30","run_containerd_1_31","run_containerd_1_32","run_containerd_Automatic"]
  #   if: ${{ always() }}
  #   runs-on: ubuntu-latest
  #   # env:
  #     # JOB_NAMES: |
  #     #   {"run_containerd_1_28":"e2e: OpenStack, Containerd, Kubernetes 1.28","run_containerd_1_29":"e2e: OpenStack, Containerd, Kubernetes 1.29","run_containerd_1_30":"e2e: OpenStack, Containerd, Kubernetes 1.30","run_containerd_1_31":"e2e: OpenStack, Containerd, Kubernetes 1.31","run_containerd_1_32":"e2e: OpenStack, Containerd, Kubernetes 1.32","run_containerd_Automatic":"e2e: OpenStack, Containerd, Kubernetes Automatic"}
  #   steps:

  #     - name: Checkout sources
  #       uses: actions/checkout@v3.5.2

  #     - name: Update comment on finish
  #       id: update_comment_on_finish
  #       if: ${{ always() && github.event_name == 'workflow_dispatch' && !!github.event.inputs.issue_number }}
  #       env:
  #         NEEDS_CONTEXT: ${{ toJSON(needs) }}
  #         JOB_CONTEXT: ${{ toJSON(job) }}
  #         STEPS_CONTEXT: ${{ toJSON(steps) }}
  #       uses: actions/github-script@v6.4.1
  #       with:
  #         github-token: ${{secrets.CHANGELOG_ACCESS_TOKEN}}
  #         retries: 3
  #         script: |
  #           const statusConfig = 'workflow,final,no-skipped,restore-separate';
  #           const name = 'e2e: OpenStack';
  #           const needsContext = JSON.parse(process.env.NEEDS_CONTEXT);
  #           const jobContext = JSON.parse(process.env.JOB_CONTEXT);
  #           const stepsContext = JSON.parse(process.env.STEPS_CONTEXT);
  #           let jobNames = null
  #           if (process.env.JOB_NAMES) {
  #             jobNames = JSON.parse(process.env.JOB_NAMES);
  #           }

  #           core.info(`needsContext: ${JSON.stringify(needsContext)}`);
  #           core.info(`jobContext: ${JSON.stringify(jobContext)}`);
  #           core.info(`stepsContext: ${JSON.stringify(stepsContext)}`);
  #           core.info(`jobNames: ${JSON.stringify(jobNames)}`);

  #           const ci = require('./.github/scripts/js/ci');
  #           return await ci.updateCommentOnFinish({github, context, core, statusConfig, name, needsContext, jobContext, stepsContext, jobNames});
  #     - name: Set commit status after e2e run
  #       id: set_e2e_requirement_status
  #       if: ${{ always() }}
  #       uses: actions/github-script@v6.4.1
  #       env:
  #         JOB_STATUS: ${{ job.status }}
  #         STATUS_TARGET_COMMIT: ${{needs.git_info.outputs.github_sha}}
  #       with:
  #         github-token: ${{secrets.CHANGELOG_ACCESS_TOKEN}}
  #         script: |
  #           const e2eStatus = require('./.github/scripts/js/e2e-commit-status');

  #           await e2eStatus.setStatusAfterE2eRun({github, context, core});